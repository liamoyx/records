{"./":{"url":"./","title":"Introduction","keywords":"","body":"记录 记录平时遇到的问题和解决方法. GitHub和Gitee码云同步： GitHub Gitee码云 Copyright © Xintao all right reserved，powered by Gitbook修改时间: 2020-06-02 00:25:19 "},"工具软件使用/gitbook使用.html":{"url":"工具软件使用/gitbook使用.html","title":"gitbook使用","keywords":"","body":"gitbook使用 安装 基本使用 配置文件 其他需求 References 安装 我是在Win10的wsl下安装使用的。 安装node.js和npm. Ref # Enable the NodeSource repository curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - # install sudo apt install nodejs # verify node --version npm --version 安装gitbook # install sudo npm install -g gitbook-cli # verify gitbook -V 基本使用 初始化 gitbook init 它会生成 README.md: 本书介绍 SUMMARY.md: 定义本书目录 编辑 可用VSCode编辑 输出 输出静态网页 gitbook build 它会生成_book文件夹 输出pdf # install sudo apt install calibre npm install gitbook-pdf -g # 命令，会生成book.pdf的文件 gitbook pdf . 预览 gitbook --port 4000 serve ./ 可以在http://localhost:4000/实时预览 配置文件 在根目录下可以使用配置文件book.json. 更多内容可参见这里. 其他需求 自动生成目录（SUMMARY.md）Ref # install npm install -g gitbook-summary # cmd book sm 它会根据字母序来组织，如果需要保留顺序，可在题目前加上数字。 如果有多余的目录，比如\"node_modules\", 则可以在book.json中加入 \"ignores\": [ \"node_modules\" ] 生成当前页的目录 使用插件: simple-page-toc Ref npm install gitbook-plugin-simple-page-toc 在需要生成目录的地方加上 . 添加Toc到侧边悬浮导航以及回到顶部按钮 使用插件: anchor-navigation-ex Ref npm install gitbook-plugin-anchor-navigation-ex 为代码块添加复制的按钮 使用插件: copy-code-button Ref) npm install gitbook-plugin-copy-code-button 折叠目录 使用插件: expandable-chapters npm install gitbook-plugin-expandable-chapters 可配合插件 chapter-fold, 使得箭头变小。 折叠目录有一个缺点，就是默认是折叠的，这个没法默认展开，有点不友好，暂时先不用了。 页面添加修改时间等页脚 使用插件: expandable-chapters Ref npm install gitbook-plugin-tbfed-pagefooter 支持中文搜索，及搜索结果高亮 使用插件: search-plus [Ref](http://gitbook.zhangjikai.com/plugins.html#search-plus npm install gitbook-plugin-search-plus 字体颜色背景 使用插件: emphasize Ref npm install gitbook-plugin-emphasize 使用示例: This text is highlighted with markdown! This text is highlighted in red! This text is highlighted with a custom color! 源码: 把\\%替换成% This text is {\\% em \\%}highlighted with **markdown**!{\\% endem \\%} This text is {\\% em type=\"red\" \\%}highlighted in red!{\\% endem \\%} This text is {\\% em color=\"#ff0000\" \\%}highlighted with a custom color!{\\% endem \\%} 带颜色字体 红色字体示例。 红色字体 代码高亮 使用插件: prism Ref npm install gitbook-plugin-prism npm install gitbook-plugin-prism-themes 还需要配置pluginsConfig；禁用自带的-highlight. 修改favicon 使用插件: custom-favicon Ref npm install gitbook-plugin-custom-favicon 使用Google统计 使用插件: ga Ref npm install gitbook-plugin-ga 但最新的版本好像不支持，故没有使用。 添加TODO List 使用插件: todo Ref npm install gitbook-plugin-todo 源码: - [ ] item 1 - [x] item 2 [ ] item 1 [x] item 2 References http://gitbook.zhangjikai.com/ https://tonydeng.github.io/gitbook-zh/gitbook-howtouse/index.html Copyright © Xintao all right reserved，powered by Gitbook修改时间: 2020-06-25 11:03:51 "},"工具软件使用/git配置.html":{"url":"工具软件使用/git配置.html","title":"git配置","keywords":"","body":"git配置 配置glocal setting git命令缩写 生成公钥 github生成公钥 gitlab生成公钥 配置Cofing 测试 git clone 配置两个github账户 需求: 个人代码在github上，公司代码在gitlab上。在本地需要同时使用两个账号。关键是配置好各自的ssh公钥和远程关联。 配置glocal setting 根据使用频率，在github上使用global git setting，在gitlab上使用local的git setting。 可在任何目录下配置global setting。 git config --global user.name Xintao Wang git config --global user.email example@email.com git命令缩写 git config --global alias.st status git config --global alias.co checkout git config --global alias.ci commit git config --global alias.br branch git config --global alias.unstage 'reset HEAD' # 把暂存区的修改撤销掉（unstage） git config --global alias.last 'log -1' # 显示最后一次提交信息 git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%Creset' --abbrev-commit\" 如果只想在local文件夹生效，则把--global去掉即可。 生成公钥 github生成公钥 ssh-keygen -t rsa -C example@email.com 连续回车即可，默认文件为：id_rsa.pub. 把 id_rsa.pub 内容copy到github的setting SSH keys页面即可. gitlab生成公钥 ssh-keygen -t rsa -C gitlab_example@email.com 注意第一次生成id_rsa指定文件名：id_rsa_gitlab.pub. 把 id_rsa_gitlab.pub 内容copy到gitlab的setting SSH keys页面. 配置Cofing 用来区分git的时候，往哪个Host pull/push. vi config 写入以下内容: Host github.com HostName github.com User example@email.com IdentityFile ~/.ssh/id_rsa Host gitlab.xx.xxxxxxxxx.com HostName gitlab.xx.xxxxxxxxx.com User gitlab_example@email.com IdentityFile ~/.ssh/id_rsa_gitlab .ssh/目录下的known_hosts为免密登录用户信息，当成功添加github与gitlab的公钥，并向远程建立连接后，会自动生成known_hosts文件. 测试 ssh -T git@github.com ssh -T git@gitlab.xx.xxxxxxxxx.com 一般会显示：Hi xinntao or Welcom to GitLab, @xinntao. git clone 使用global setting的账号来git clone没有问题，下面主要说使用local setting的账号来git clone。 git clone git@gitlab.xx.xxxxxxxxx.com:yyy/zzz.git 它是根据git@gitlab.xx.xxxxxxxxx.com Host来识别使用哪个SSH key的 修改local git setting 进入clone下来的文件夹, 修改local git setting git config --local user.name wangxintao git config --local user.email gitlab_example@email.com 检查 .git/config: [core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true [remote \"origin\"] url = git@gitlab.xx.xxxxxxxxx.com:yyy/zzz.git fetch = +refs/heads/*:refs/remotes/origin/* [branch \"master\"] remote = origin merge = refs/heads/master [user] name = wangxintao email = gitlab_example@email.com [branch \"0.1.0\"] remote = origin merge = refs/heads/0.1.0 配置两个github账户 原理是一样的，创建公钥的时候区分开，然后在config里面写明: Host github.com-xintao HostName github.com User example_2@email.com IdentityFile ~/.ssh/id_rsa_work_xintao git clone的时候注意Host的后缀 git clone git@github.com-xintao:work_user1/repo_name.git Copyright © Xintao all right reserved，powered by Gitbook修改时间: 2020-06-02 00:25:19 "},"工具软件使用/tmux使用.html":{"url":"工具软件使用/tmux使用.html","title":"tmux使用","keywords":"","body":"tmux使用 配置 常见命令 其他问题 配置 可以把命令写入 ~/.tmux.conf, 这样每次启动tmux就自动执行了。 setw -g mouse on # 启用鼠标 set-option -g allow-rename off # 禁止修改window名字 set -g history-limit 100000 # 设置显示历史，debug的时候可以看到更多信息 # set scroll speed bind -Tcopy-mode WheelUpPane send -N1 -X scroll-up bind -Tcopy-mode WheelDownPane send -N1 -X scroll-down 常见命令 新建tmux new -s XT 修改prefix键set-option -g prefix C-a 其他问题 调节scroll速度, Refbind -Tcopy-mode WheelUpPane send -N1 -X scroll-up bind -Tcopy-mode WheelDownPane send -N1 -X scroll-down Copyright © Xintao all right reserved，powered by Gitbook修改时间: 2020-06-25 10:59:46 "},"工具软件使用/Ubuntu安装PyTorch环境.html":{"url":"工具软件使用/Ubuntu安装PyTorch环境.html","title":"Ubuntu安装PyTorch环境","keywords":"","body":" Ubuntu实验环境配置 (PyTorch) Created : 2019/01/07; Updated : 2019/01/29; 可以按照以下的流程来配置Lab机器. 1.1. 一些基本命令 查看Ubuntu版本: cat /etc/issue apt更新 sudo apt-get update sudo apt-get upgrade sudo apt-get autoremove --purge 其他apt相关 查看已经安装的 apt list --installed 搜索软件列表 apt-cache search nvidia 1.2. tmux开启鼠标键盘控制 setw -g mouse on OR setw -g mode-mouse on 1.3. 安装Anaconda wget ... bash ..., 不需要sudo权限 conda update --all 1.4. 检查Nvidia Driver 关于cuda不同版本对driver最低version的要求, 参见 nvidia doc - Table 1. CUDA 10.0.130 >= 410.48 若需要update driver: 通过 apt-get 安装 sudo add-apt-repository ppa:graphics-drivers/ppa + sudo apt-get update 搜索列表, 查看是否有需要的版本 apt-cache search nvidia 安装 sudo apt-get install nvidia-410 若apt-get安装失败, 可以通过 cuda.run文件自带的driver安装, 注意在这之前可能需要 卸载已有的cuda, apt list --installed, sudo apt-get --purge autoremove packagename 可能需要禁用lightdm服务, sudo service lightdm stop 若有问题, 请参考晖哥的 安装指南 可以添加一些配置, 提高性能. These commands can be added to /etc/rc.local for executing at system boot. (Lab的机器都已经有了) sudo nvidia-smi -pm 1 sudo nvidia-smi -e 0 确认是否成功 nvidia-smi. 1.5. 安装cuda 10.0 下载.run文件安装 sudo bash .run, 列一些选项: Do you accept the previously read EULA? accept/decline/quit: accept Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 410.48? (y)es/(n)o/(q)uit: no Install the CUDA 10.0 Toolkit? (y)es/(n)o/(q)uit: yes Enter Toolkit Location [ default is /usr/local/cuda-10.0 ]: Do you want to install a symbolic link at /usr/local/cuda? (y)es/(n)o/(q)uit: no Install the CUDA 10.0 Samples? (y)es/(n)o/(q)uit: no 注解 若有补丁, sudo bash cuda_9.1.85.1_linux.run. (目前cuda10还没有) 1.6. 安装cudnn cuda10对应7.4.2, 安装cudnn只要copy即可: sudo cp -r cuda/lib64/ /usr/local/cuda-10.0/lib64/ sudo cp -r cuda/include/ /usr/local/cuda-10.0/include/ 1.7. 新建Anaconda环境 - pt1 conda create -n pt1 python=3.7 修改pt1启动环境: activate mkdir -p ~/anaconda3/envs/pt1/etc/conda/activate.d cd ~/anaconda3/envs/pt1/etc/conda/activate.d vim activate.sh 写入以下内容: !/bin/sh ORIGINAL_LD_LIBRARY_PATH=$LD_LIBRARY_PATH ORIGINAL_PATH=$PATH ORIGINAL_CPATH=$CPATH export LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64:/usr/local/cuda-10.0/extras/CUPTI/lib64:/lib/nccl/cuda-10.0:$LD_LIBRARY_PATH export PATH=/usr/local/cuda-10.0/bin${PATH:+:${PATH}} export CPATH=/usr/local/cuda-10.0/include${CPATH:+:${CPATH}} (option) export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/libnccl.so:$LD_LIBRARY_PATH you can find the nccl path by find /usr -name '*nccl*' chmod +x activate.sh deactivate mkdir -p ~/anaconda3/envs/pt1/etc/conda/deactivate.d cd ~/anaconda3/envs/pt1/etc/conda/deactivate.d vim deactivate.sh !/bin/sh export LD_LIBRARY_PATH=$ORIGINAL_LD_LIBRARY_PATH unset ORIGINAL_LD_LIBRARY_PATH export PATH=$ORIGINAL_PATH unset ORIGINAL_PATH export ORIGINAL_CPATH=$ORIGINAL_CPATH unset ORIGINAL_CPATH chmod +x deactivate.sh 1.8. 安装PyTorch 参见 官网 命令 (要确定安装的pytorch版本, 以及cuda版本), e.g. conda install pytorch torchvision cuda100 -c pytorch 验证: python import torch print(torch.version) print(torch.version.cuda) print(torch.backends.cudnn.version()) print(torch.cuda.is_available()) Copyright © Xintao all right reserved，powered by Gitbook修改时间: 2020-06-02 00:23:52 "},"工具软件使用/vscode配置.html":{"url":"工具软件使用/vscode配置.html","title":"vscode配置","keywords":"","body":"VSCode配置 代码规范配置 代码格式和静态检查 pre-commit hook 单元测试 插件 ssh服务器 代码规范配置 代码格式和静态检查 一般来说有三类： 代码格式: pep8, flake8 静态检查: yapf 自动排序import package: isortpip install flake8 yapf isort vscode修改yapf配置 \"python.formatting.yapfArgs\": [ \"--style\", \"{BASED_ON_STYLE = pep8, BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF = true, SPLIT_BEFORE_EXPRESSION_AFTER_OPENING_PAREN = true}\" ], 这个修改是全局的，如果不希望全局，则可以在.vscode/settings.json中修改。 保存时自动格式化 \"editor.formatOnSave\": true, \"editor.formatOnPaste\": true, \"[python]\": { \"editor.codeActionsOnSave\": { \"source.organizeImports\": true } } 对于isort需要按保存键两次才可以。 pre-commit hook 提交代码前，在本地执行一些命令。 pip install -U pre-commit pre-commit install # 在当前repo中执行 单元测试 测试单一函数 pytest [xxx.py] -s -k \"function_name\" 其中 -s是输出print内容; -k是只测试包含\"function_name\"的函数。 覆盖率 pip install coverage coverage run --source=your_pacakge -m pytest coverage report -m 插件 Remote-SSH Microsoft 远程打开、编辑、运行代码库 Remote-SSH: Editing Configuration Files Microsoft Remote-WSL Microsoft 在windows上使用WSL vscode-icons VSCode Icons Team 优化VSCode图标 Format Files jbockle 批量format文件 GitLens Eric Amodio 显示提交记录；比对多个branch内容 Markdown Preview Enhanced Yiyi Wang markdownlint David Anson Python Microsoft Git Graph mhutchie Live Server Ritwick Dey 点击右下角的Go Live, 就能运行一个server，能在浏览器中浏览网页 可以配置默认打开的根目录 ssh服务器 [TODO] Copyright © Xintao all right reserved，powered by Gitbook修改时间: 2020-06-02 00:25:19 "},"工具软件使用/zsh配置.html":{"url":"工具软件使用/zsh配置.html","title":"zsh配置","keywords":"","body":"zsh配置 安装 主题 插件 安装 安装zsh sudo apt-get install zsh 或者已经安装了，查看/usr/bin/zsh 安装oh-my-zsh sh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\" 主题 默认的robbyrussell主题就已经很不错啦。 agnoster也还行，就是字符显示有时有问题。修改后, 生效: source ~/.zshrc 插件 zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting Ref: https://github.com/zsh-users/zsh-syntax-highlighting https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md zsh-completions git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions Ref: https://github.com/zsh-users/zsh-completions https://github.com/zsh-users/zsh-completions/blob/master/README.md zsh-autosuggestions git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions Ref: https://github.com/zsh-users/zsh-autosuggestions https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md zsh-history-substring-search git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search Ref: https://github.com/zsh-users/zsh-history-substring-search https://github.com/zsh-users/zsh-history-substring-search/blob/master/README.md 记得要在~/.zshrc更新: (如果没有.zshrc这个文件， 运行一下zsh即可) plugins=(git git-extras yarn zsh-completions zsh-syntax-highlighting zsh-autosuggestions zsh-history-substring-search) autoload -U compinit && compinit 然后执行生效: source ~/.zshrc Copyright © Xintao all right reserved，powered by Gitbook修改时间: 2020-06-02 00:25:19 "},"工具软件使用/码云gitee和github同时使用.html":{"url":"工具软件使用/码云gitee和github同时使用.html","title":"码云gitee和github同时使用","keywords":"","body":"码云gitee和github同时使用 从github同步项目 local代码同时push到github和gitee 个人主页同时放GitHub和Gitee 因为国内github速度很慢，所以想使用码云gitee来做同步。但很多项目之前是放在github上的，所以希望能够在码云gitee和github之间同步起来。 从github同步项目 这步骤很简单，gitee支持从github项目直接导入 local代码同时push到github和gitee 一个本地仓库可以对应多个远程仓库。 将gitee加入远程仓库 git remote add gitee git@gitee.com:xinntao/records.git 可以通过git remote -v查看远程仓库： gitee git@gitee.com:xinntao/records.git (fetch) gitee git@gitee.com:xinntao/records.git (push) origin git@github.com:xinntao/records.git (fetch) origin git@github.com:xinntao/records.git (push) 可以看到本地仓库同时对应了github和gitee两个远程仓库。 push # push到origin: 对应github git push origin master # push到gitee git push gitee master 个人主页同时放GitHub和Gitee Gitee可以参考：https://gitee.com/help/articles/4136 Copyright © Xintao all right reserved，powered by Gitbook修改时间: 2020-06-25 11:08:57 "},"工具软件使用/git使用.html":{"url":"工具软件使用/git使用.html","title":"git使用","keywords":"","body":"git配置 清理过大的git repo 自动同步Github到Gitee码云 Github Public和Private同步 清理过大的git repo 方法一(推荐): 使用bfg clone the bare repo (即带.git结尾的原始文件). git clone --mirror git@github.com:xinntao/BasicSR.git 删除大文件(>4M), 并改写历史. java -jar bfg.jar --strip-blobs-bigger-than 4M some-big-repo.git (BasicSR的repo中由于之前上传了.pth的model文件，导致整个repo很大=-=) 更新repo并上传. cd BasicSR.git git reflog expire --expire=now --all && git gc --prune=now --aggressive git push 经过更新后，BasicSR的repo大小由原来的40+M --> 1.4M :-) 方法二: 使用git filter-branch 参考 (我尝试了但没有成功，不知道哪里出了问题=-=) 自动同步Github到Gitee码云 Gitee是可以: 从Github的repo直接clone到Gitee; 手动强制从Github同步到Gitee. 但是没法在Gitee上设置定期自动从Github同步。 解决方法：使用Github的Actions - git-mirror-action repo下新建.github/workflows/gitee-repo-mirror.yml 写入: (这里以BasicSR为例) name: Mirror BasicSR to Gitee on: [ push, delete, create ] jobs: git-mirror: runs-on: ubuntu-latest steps: - uses: wearerequired/git-mirror-action@v1 env: SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} with: source-repo: 'git@github.com:xinntao/BasicSR.git' destination-repo: 'git@gitee.com:xinntao/BasicSR.git' 其中, SSH_PRIVATE_KEY: 1) Create a SSH key which has access to both repositories; 2) Store the private key as a secret. 这样，当我们push, delete, create便会触发Actions, 同步GitHub代码到Gitee. 参考: git-mirror-action 巧用Github Action同步代码到Gitee Github Public和Private同步 需求: 我有一个BasicSR的public repo, 同时，自己的private的开发是放在BasicSR-privaterepo的。希望定期可以从public的BasicSR repo pull. 在BasicSR-private中把public加入 git remote add pub git@github.com:xinntao/BasicSR.git 可以通过git remote -v查看远程仓库： origin git@github.com:xinntao/BasicSR-private.git (fetch) origin git@github.com:xinntao/BasicSR-private.git (push) pub git@github.com:xinntao/BasicSR.git (fetch) pub git@github.com:xinntao/BasicSR.git (push) pull 如果public repo有更新了，就可以pull到private repo中啦 git pull pub master Copyright © Xintao all right reserved，powered by Gitbook修改时间: 2020-06-25 11:49:00 "}}